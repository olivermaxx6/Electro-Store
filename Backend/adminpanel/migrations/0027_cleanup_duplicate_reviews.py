# Generated by Django 5.2.6 on 2025-09-19 12:49

from django.db import migrations
from django.db.models import Count


def cleanup_duplicate_reviews(apps, schema_editor):
    """Remove duplicate reviews, keeping only the first one for each user-product combination"""
    Review = apps.get_model('adminpanel', 'Review')
    ServiceReview = apps.get_model('adminpanel', 'ServiceReview')
    
    # Clean up product reviews
    duplicates = Review.objects.values('product', 'user').annotate(
        count=Count('id')
    ).filter(count__gt=1)
    
    for duplicate in duplicates:
        product_id = duplicate['product']
        user_id = duplicate['user']
        
        # Get all reviews for this product-user combination
        reviews = Review.objects.filter(product_id=product_id, user_id=user_id).order_by('created_at')
        
        # Keep the first one, delete the rest
        reviews_to_delete = reviews[1:]
        for review in reviews_to_delete:
            review.delete()
    
    # Clean up service reviews
    service_duplicates = ServiceReview.objects.values('service', 'user').annotate(
        count=Count('id')
    ).filter(count__gt=1)
    
    for duplicate in service_duplicates:
        service_id = duplicate['service']
        user_id = duplicate['user']
        
        # Get all reviews for this service-user combination
        reviews = ServiceReview.objects.filter(service_id=service_id, user_id=user_id).order_by('created_at')
        
        # Keep the first one, delete the rest
        reviews_to_delete = reviews[1:]
        for review in reviews_to_delete:
            review.delete()


def reverse_cleanup_duplicate_reviews(apps, schema_editor):
    """This migration cannot be reversed"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('adminpanel', '0026_review_author_name'),
    ]

    operations = [
        migrations.RunPython(cleanup_duplicate_reviews, reverse_cleanup_duplicate_reviews),
    ]
